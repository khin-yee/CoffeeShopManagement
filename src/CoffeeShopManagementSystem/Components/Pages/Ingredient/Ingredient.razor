@page "/Ingredient"
@using CoffeeShopManagementSystem.ApiControl
@using CoffeeShopManagementSystem.Domain.Model
@using CoffeeShopManagementSystem.Domain.Model.DTO
@using System.Text.Json
@inject NavigationManager Navigation
@inject IJSRuntime jsRuntime
@inject NavigationManager navigationManager
@inject IApiCall apicall
@rendermode InteractiveServer
<style>
    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-right: 20px;
        margin-bottom: 10px; /* Optional: adds space between the button and the table */
    }

    .filterbtnz:hover {
        background-color: grey;
        color: black;
    }
</style>
<h3>Menu Ingredients List<img src="/Images/ig.png" alt="Order" width="30" height="30" style="margin-right: 10px;" /></h3>
<div class="button-container">
    <NavLink class="btn btn-dark mx-2 filterbtnz" href="/CreateIngredient">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="black">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M11.5919 9.13863C12.7359 9.13863 13.6666 10.0646 13.6666 11.2026C13.6666 12.3406 12.7359 13.2666 11.5919 13.2666C10.4473 13.2666 9.51593 12.3406 9.51593 11.2026C9.51593 10.0646 10.4473 9.13863 11.5919 9.13863ZM11.5919 10.1386C10.9986 10.1386 10.5159 10.616 10.5159 11.2026C10.5159 11.79 10.9986 12.2666 11.5919 12.2666C12.1846 12.2666 12.6666 11.79 12.6666 11.2026C12.6666 10.616 12.1846 10.1386 11.5919 10.1386ZM6.7202 10.7285C6.9962 10.7285 7.2202 10.9525 7.2202 11.2285C7.2202 11.5045 6.9962 11.7285 6.7202 11.7285H2.51953C2.24353 11.7285 2.01953 11.5045 2.01953 11.2285C2.01953 10.9525 2.24353 10.7285 2.51953 10.7285H6.7202ZM4.07533 2.66663C5.22 2.66663 6.15067 3.59329 6.15067 4.73129C6.15067 5.86929 5.22 6.79463 4.07533 6.79463C2.93133 6.79463 2 5.86929 2 4.73129C2 3.59329 2.93133 2.66663 4.07533 2.66663ZM4.07533 3.66663C3.48267 3.66663 3 4.14396 3 4.73129C3 5.31796 3.48267 5.79463 4.07533 5.79463C4.66867 5.79463 5.15067 5.31796 5.15067 4.73129C5.15067 4.14396 4.66867 3.66663 4.07533 3.66663ZM12.7941 4.26689C13.0701 4.26689 13.2941 4.49089 13.2941 4.76689C13.2941 5.04289 13.0701 5.26689 12.7941 5.26689H8.59407C8.31807 5.26689 8.09407 5.04289 8.09407 4.76689C8.09407 4.49089 8.31807 4.26689 8.59407 4.26689H12.7941Z" fill="white" />
        </svg>
        <span>Add Ingredient</span>
    </NavLink>

</div>
@* <MudDataGrid Items="@ingredient" Striped="true" Hover="true">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="IngredientName" />
        <PropertyColumn Property="x => x.Quality" Title="Quality" />
        <PropertyColumn Property="x => x.Unit" Title="Units" />
        <PropertyColumn Property="x => x.Amount" Title="Amount" />

        <!-- Action Column with Delete and Edit Buttons -->
        <TemplateColumn Title="Action">
            <CellTemplate Context="cellContext">
                @{
                    var deleteUrl = $"/DeleteIngredient/{cellContext.Item.Name}"; // Construct the URL here
                }
                @{
                    var EditUrl = $"/EditIngredient/{cellContext.Item.Name}";
                }
                <NavLink href="@deleteUrl">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                </NavLink>
                <NavLink href="@deleteUrl">
                <MudIconButton Size="@Size.Medium"
                               Icon="@Icons.Material.Outlined.Edit"
                               OnClick="@cellContext.Actions.StartEditingItemAsync" />
                               </NavLink>
            </CellTemplate>
        </TemplateColumn>

    </Columns>
</MudDataGrid> *@
<MudTable @ref="@_table" Items="@ingredient" Dense="true" Striped="true" RowsPerPage="5" Hover="true" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Quality</MudTh>
        <MudTh>Unit</MudTh>
        <MudTh>Amount</MudTh>
        <MudTh>Action</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Quality">@context.Quality</MudTd>
        <MudTd DataLabel="Name">@context.Unit</MudTd>
        <MudTd DataLabel="Position">@context.Amount</MudTd>
        <MudTd DataLabel="Action">


            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => ConfirmDeleteIngredient(context.Name))" />

        </MudTd>
    </RowTemplate>
    <PagerContent>
        <div style="display: flex; justify-content:safe center;">
            <MudPagination SelectedChanged="PageChanged"
                           Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)"
                           Class="pa-4"
                           Color="Color.Dark" />
        </div>
    </PagerContent>
</MudTable>

@code {
    private MudTable<IngredientDTO> _table;
    private DateTime? _date = DateTime.Today;
    private List<IngredientDTO>? ingredient;
    private bool _isInitialized;
    protected override async Task OnInitializedAsync()
    {
        if (!_isInitialized)
        {
            try
            {
                ingredient = await apicall.GetIngredient();
                _isInitialized = true; // Set the flag after initialization
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching products: {ex.Message}");
            }
        }
    }
    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }



    private async Task ConfirmDeleteIngredient(string productName)
    {
        try
        {
            // Show confirmation dialog
            var result = await jsRuntime.InvokeAsync<JsonElement>("Swal.fire", new
            {
                title = "Are you sure?",
                text = "This action cannot be undone!",
                icon = "warning",
                showCancelButton = true,
                confirmButtonColor = "grey",
                cancelButtonColor = "dark",
                confirmButtonText = "Delete",
                cancelButtonText = "Cancel"
            });
            Console.WriteLine(result);
            // Check if the user confirmed the deletion
            bool isConfirmed = result.GetProperty("isConfirmed").GetBoolean();
            bool isDenied = result.GetProperty("isDenied").GetBoolean();
            bool isDismissed = result.GetProperty("isDismissed").GetBoolean(); if (isConfirmed)
            {
                await DeleteIngredient(productName);
            }
            else
            {
                Console.WriteLine("User canceled the delete action.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConfirmDeleteProduct: {ex.Message}");
        }
    }

    private async Task DeleteIngredient(string Name)
    {
        try
        {
            var response = await apicall.DeleteIngredient(Name);
            // Optionally, refresh the product list
            if (response.ErrorCode == "00")
            {
                await jsRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Success!",
                    text = "Ingredient Deleted successfully!",
                    icon = "success",
                    confirmButtonText = "OK"
                });
            }
            else
            {
                await jsRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Error!",
                    text = response.ErrorMessage,
                    icon = "error",
                    confirmButtonText = "OK",
                    confirmButtonColor = "dark",

                });
            }
            navigationManager.NavigateTo("/Ingredient", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting product: {ex.Message}");
        }
    }

}
