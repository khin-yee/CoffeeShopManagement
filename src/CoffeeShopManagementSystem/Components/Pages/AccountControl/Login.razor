@page "/Login"
@using CoffeeShopManagementSystem.ApiControl
@using CoffeeShopManagementSystem.Domain.Model
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager navigationManager
@inject IApiCall apicall
<style>
    .row {
        margin-top: 50px;
    }
</style>
<div class="row">
    <MudCard Outlined="true" class="col-lg-4 offset-lg-4 pt-4  pb-4 border">
        <MudCardContent>
            <EditForm Model="@Model" OnValidSubmit="Authenticate" FormName="Login">
                <DataAnnotationsValidator />

                <div class="mb-3 text-center flex-column">
                    <img src="/favicon.png" style="max-height:5rem;" />
                    <h3>Login</h3>
                </div>
                <div class="mb-3">
                    <label>User Name</label>
                    <InputText @bind-Value="Model.Name" class="form-control" placeholder="UserName" />
                    <ValidationMessage For="()=>Model.Name" />
                </div>
                <div class="mb-3">
                    <label>Password</label>
                    <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" />
                    <ValidationMessage For="()=>Model.Password" />
                </div>
                <div class="mb-3 text-center">
                    <span class=" text-danger">@errorMessage</span>
                </div>
                <div class="mb-3 d-grid gap-2">
                    <button type="submit" class="btn btn-outline-dark">Login</button>
                </div>
                <div class="mb-3">If you don't have account, <a class="fw-bolder" href="/AddUser">Click Here</a> to Create Account'</div>
            </EditForm>
        </MudCardContent>
    </MudCard>
</div>

@code {
    [SupplyParameterFromForm]
    public User Model { get; set; } = new();

    private string? errorMessage;

    private async Task Authenticate()
    {
        var user = await apicall.GetAccountAuth(Model.Name, Model.Password);
        if (user == null || user.Password != Model.Password)
        {
            errorMessage = "Invalid User Name or Password";
            return;
        }
        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name,Model.Name)
        };
        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContextAccessor.HttpContext.SignInAsync(principal);
        navigationManager.NavigateTo("/");
    }
}
