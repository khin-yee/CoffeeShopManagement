@page "/Product"
@using CoffeeShopManagementSystem.ApiControl
@using CoffeeShopManagementSystem.Domain.Model
@using CoffeeShopManagementSystem.Domain.Model.DTO
@inject NavigationManager Navigation
@inject IApiCall apicall
<style>
    .button-container {
        display: flex;
        justify-content: flex-end;
        margin-right: 20px;
        margin-bottom: 10px; /* Optional: adds space between the button and the table */
    }

    .filterbtnz:hover {
        background-color: grey;
        : black;
    }
</style>
<h3>Product List</h3>
<div class="button-container">
    <NavLink class="btn btn-dark filterbtnz mx-2" href="/AddProduct">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="black">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M2.667 2a.667.667 0 0 1 .667-.667h10a.667.667 0 1 1 0 1.334h-.453l-1.066 6.087a1.333 1.333 0 0 1-1.314 1.079H5.5a1.333 1.333 0 0 1-1.314-1.079L3.12 5.16h-1.12a.667.667 0 0 1 0-1.334h.667L4 7.087h6.666L11.76 2H3.334A.667.667 0 0 1 2.667 2zm5.333 10.667A1.333 1.333 0 1 1 8 14.667a1.333 1.333 0 0 1 0-2.666zm5.333 0A1.333 1.333 0 1 1 13.333 14.667a1.333 1.333 0 0 1 0-2.666z" fill="white" />
        </svg>

        <span>Add Product</span>
    </NavLink>
</div>
<MudDataGrid Items="@product" Striped="true" Hover="true" Style="border: 1px solid grey; border-radius: 5px; padding: 10px;">
    <Columns>
        <PropertyColumn Property="x => x.Name" Title="Name" />
        <PropertyColumn Property="x => x.Amount" Title="Amount" />
        <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
        <PropertyColumn Property="x => x.Category" Title="Category" />

        <TemplateColumn Title="Action">
            <CellTemplate Context="cellContext">
                @{
                    var deleteUrl = $"/DeleteProduct/{cellContext.Item.Name}"; // Construct the URL here
                }

                <NavLink href="@deleteUrl">
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" />
                </NavLink>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private List<ProductDto>? product;
    private bool _isInitialized;
    protected override async Task OnInitializedAsync()
    {
        if (!_isInitialized)
        {
            try
            {
                product = await apicall.GetProduct();
                _isInitialized = true; // Set the flag after initialization
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching products: {ex.Message}");
            }
        }
    }
    private Task DeleteProdduct()
    {
        // Placeholder logic for deletion, you can put your actual delete logic here
        return Task.CompletedTask; // Since there's no async operation, return a completed task
    }

    // Ensure this method returns a Task
    // private async Task DeleteProductAsync(ProductDto productToDelete)
    // {
    //     // Call API to delete the product
    //     var response = await apicall.DeleteProduct(productToDelete);

    //     if (response.ErrorCode == "00")
    //     {
    //         // Remove the product from the local list after successful deletion
    //         product?.Remove(productToDelete);
    //     }
    // }
}
